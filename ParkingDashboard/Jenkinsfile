pipeline {
  agent any
 /* parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to build')
    choise(name: 'ENVIRONMENT', choices: ['DEV', 'QA', 'PROD'], description: 'Environment to deploy')
    choise(name: 'VERSION', choices:['1.1.0', '1.2.0','1.3.0'], description: 'Version to deploy')
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Deploy to environment')
    booleanParam(name: 'EXECUTE_TESTS', defaultValue: false, description: 'Excute tests')
  }*/
  /*environment {
    Git_Token = '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'
    Dashboard_Repo = 'https://github.com/EasyWay07/dashboardParking.git'
    Mobile_Client_Repo = 'https://github.com/EasyWay07/EasyParkClient.git'
    Mobile_Gardien_Repo = 'https://github.com/EasyWay07/EasyParkGardien.git'
    APi_Repo = 'https://github.com/EasyWay07/EasyParkBackEnd.git'
  }*/
    stages {
        stage('Pull') {
            steps{
                script{
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            credentialsId: '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',
                            url: 'https://github.com/EasyWay07/dashboardParking.git'
                        ]]
                    ])
                }
            } 
        }
        stage('Build') {
            steps {
                script {
                    bat "cd ParkingDashboard && npm install && npm run build"
                    bat 'docker ps -a'
                }
            }
        }
        /*stage('Test') {
            steps {
                script {
                    pwd "ipconfig"
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying..."
                }
            }
        }
        /*stage('Test') {
            when {
                branch == 'test' && params.EXECUTE_TESTS
            }
            steps {
                script {
                    pwd 'npm run test'
                }   
            }
        }
        stage('Deploy') {
            when {
                branch == 'main'
            }
            steps {
                script {
                    pwd 'npm install'
                    pwd 'npm run deploy'
                    echo "Deploying to ${params.ENVIRONMENT}"
                }
            }
        }
    }
    post {
        always {
            script {
                sh 'docker-compose down'
            }
        }
        success {
            script {
                sh 'docker-compose up -d'
            }
        }
        failure {
            script {
                sh 'docker-compose up -d'
            }
        } */
    }
}